generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADMIN
}

enum CertificateStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum PracticeLevel {
  INSTRUCTOR
  CURATOR
  SUPERVISOR
}

enum SupervisionStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  firstName           String
  lastName            String
  password            String
  phone               String?
  role                Role                @default(STUDENT)
  supervisionRequests SupervisionRequest[] @relation("SupervisionRequests")
  supervisedRequests  SupervisionRequest[] @relation("SupervisedBy")
  mentorshipRequestsSent     MentorshipRequest[] @relation("MentorRequests")
  mentorshipRequestsReceived MentorshipRequest[] @relation("ApprovesMentorships")
  ceuRecords          CEURecord[]
  certificates        Certificate[]
  activeCertificate   Certificate?        @relation("ActiveCertificate")
  groups              UserGroup[]
  createdAt           DateTime            @default(now())
}

model SupervisionRequest {
  id                  String             @id @default(cuid())
  status              SupervisionStatus  @default(PENDING)
  hoursInstructor     Float              @default(0)
  hoursCurator        Float              @default(0)
  hoursSupervisor     Float              @default(0)

  approvedHoursInstructor Float?
  approvedHoursCurator    Float?
  approvedHoursSupervisor Float?

  student             User               @relation("SupervisionRequests", fields: [studentId], references: [id])
  studentId           String
  supervisor          User               @relation("SupervisedBy", fields: [supervisorId], references: [id])
  supervisorId        String
  createdAt           DateTime           @default(now())
}

model MentorshipRequest {
  id         String             @id @default(cuid())
  hours      Float
  status     SupervisionStatus @default(PENDING)
  createdAt  DateTime          @default(now())

  mentor     User              @relation("MentorRequests", fields: [mentorId], references: [id])
  mentorId   String

  approver   User              @relation("ApprovesMentorships", fields: [approverId], references: [id])
  approverId String
}

model Certificate {
  id               String             @id @default(cuid())
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  level            String
  issuedAt         DateTime
  expiresAt        DateTime
  status           CertificateStatus  @default(ACTIVE)
  fileUrl          String?
  isActive         Boolean            @default(false)
  activeForUser    User?              @relation("ActiveCertificate", fields: [activeForUserId], references: [id])
  activeForUserId  String?            @unique
}

model CEURecord {
  id                 String   @id @default(cuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String

  file_id            String?
  spentOnCertificate Boolean  @default(false)

  ceu_ethics         Float    @default(0)
  ceu_cult_diver     Float    @default(0)
  ceu_superv         Float    @default(0)
  ceu_general        Float    @default(0)

  event_name         String
  event_date         DateTime

  is_valid           Boolean  @default(true)
  createdAt          DateTime @default(now())
}

model Group {
  id        String       @id @default(cuid())
  name      String       @unique
  rank      Int          @default(0)
  users     UserGroup[]
  createdAt DateTime     @default(now())
}

model UserGroup {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  group    Group  @relation(fields: [groupId], references: [id])
  groupId  String
  createdAt DateTime @default(now())
}
