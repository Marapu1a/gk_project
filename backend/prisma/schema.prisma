// schema.prisma (переработанная с атомарными записями CEU и часов)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT     // обычный пользователь
  REVIEWER    // проверяет CEU и супервизию
  ADMIN       // полный доступ
}

enum RecordStatus {
  UNCONFIRMED
  CONFIRMED
  REJECTED
  SPENT
}

enum CEUCategory {
  ETHICS
  CULTURAL_DIVERSITY
  SUPERVISION
  GENERAL
}

enum PracticeLevel {
  INSTRUCTOR
  CURATOR
  SUPERVISOR
}

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  password            String
  fullName            String
  phone               String?
  birthDate           DateTime?
  country             String?
  city                String?
  avatarUrl           String?
  isEmailConfirmed    Boolean  @default(false)
  role                Role     @default(STUDENT)

  certificates        Certificate[]
  ceuRecords          CEURecord[]
  supervisionRecords  SupervisionRecord[]
  groups              UserGroup[]

  reviewedCEUEntries       CEUEntry[]          @relation("ReviewedCEUEntry")
  reviewedSupervisionHours SupervisionHour[]   @relation("ReviewedSupervisionHour")
  documentReviewRequests   DocumentReviewRequest[]

  createdAt           DateTime @default(now())
}

model Certificate {
  id         String   @id @default(cuid())
  number     String   @unique
  title      String
  fileUrl    String
  issuedAt   DateTime
  expiresAt  DateTime

  userId     String
  user       User     @relation(fields: [userId], references: [id])

}

model CEURecord {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  fileId     String?
  eventName  String
  eventDate  DateTime
  createdAt  DateTime @default(now())

  entries    CEUEntry[]
}

model CEUEntry {
  id         String   @id @default(cuid())
  recordId   String
  record     CEURecord @relation(fields: [recordId], references: [id])

  category   CEUCategory
  value      Float
  status     RecordStatus @default(UNCONFIRMED)

  reviewerId String?
  reviewer   User?    @relation("ReviewedCEUEntry", fields: [reviewerId], references: [id])
  reviewedAt DateTime?
  rejectedReason String?
}

model SupervisionRecord {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  fileId     String?
  createdAt  DateTime @default(now())

  hours      SupervisionHour[]
}

model SupervisionHour {
  id         String   @id @default(cuid())
  recordId   String
  record     SupervisionRecord @relation(fields: [recordId], references: [id])

  type       PracticeLevel
  value      Float
  status     RecordStatus @default(UNCONFIRMED)

  reviewerId String?
  reviewer   User?    @relation("ReviewedSupervisionHour", fields: [reviewerId], references: [id])
  reviewedAt DateTime?
  rejectedReason String?
}

model Group {
  id        String       @id @default(cuid())
  name      String       @unique
  rank      Int          @default(0)
  users     UserGroup[]
  createdAt DateTime     @default(now())
}

model UserGroup {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
}

model DocumentReviewRequest {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  documentDetails Json
  status          RecordStatus  @default(UNCONFIRMED)
  paid            Boolean       @default(false)
  reviewerEmail   String?
  submittedAt     DateTime      @default(now())
  reviewedAt      DateTime?
  comment         String?

  @@unique([userId, status], name: "one_active_request_per_user")
}
